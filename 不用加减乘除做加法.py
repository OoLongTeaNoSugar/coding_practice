# -*- coding:utf-8 -*-
"""
Q: 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。

A: 两个数异或：相当于每一位相加，而不考虑进位；
两个数相与，并左移一位：相当于求得进位；将上述两步的结果相加。
注意：在使用Python实现的过程中，对于正整数是没有问题的，但是对于负数，会出现死循环情况。
因为在Python中，对于超出32位的大整数，会自动进行大整数的转变，
这就导致了在右移位过程中，不会出现移到了0的情况，也就会造成了死循环。
已经知道了右移过程中大整数的自动转化，导致变不成0，那么只需要在移动的过程中加一下判断就行了。
一个int可表示的无符号整数为4294967295，对应的有符号为-1。因此最后我们可以判断符号位是否为1。
"""
class Solution:
    def Add(self, num1, num2):
        # write code here
        while num2 != 0:
            # 异或操作，相当于相加但不进位
            temp = num1 ^ num2
            # 相与，左移一位，等于进位；所以循环条件是进位为0时结束
            num2 = (num1 & num2) << 1
            # 取和temp一样的值
            num1 = temp & 0xFFFFFFFF
        # 判断是否为负数（仅在python中出现这种情况）
        return num1 if num1 >> 31 == 0 else num1 - 4294967296